//1

import java.util.*;
public class Main{
    public static void main(String args[]){
        //get inputs
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int result=ReverseNumber.reverse(a);
        System.out.println(result);
        //type your code here
    }
}

public class ReverseNumber{
    public static int reverse (int num)
    {
        StringBuilder s = new StringBuilder();
        while(num>0){
            s.append(num%10);
            num /= 10;
        }
        String res = s.toString();
        int ans = Integer.parseInt(res);
        return ans;
    //type your code here
}
}


//2

import java.util.*;
public class Main{
    public static void main(String args[]){
        //type your code here
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        EnrollNumbers.printNumbers(a);
    }
}

public class EnrollNumbers{
    public static void printNumbers (int n)
    {
    //type your code here
    if(n>1){
        printNumbers(n-1);
    }
    System.out.print(n+" ");
}
}


//3

import java.util.*;
public class Main{
    public static void main(String args[]){
        //type your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int result = FindSum.summation(n,m);
        System.out.println(result);
    }
}

public class FindSum{
    public static int summation (int n,int m)
    {
    //type your code here
    if(m==1){
        return n*(n+1)/2;
    }
    int sum = summation(n,m-1);
    return sum*(sum+1)/2;
}
}


//4

import java.util.*;
public class Main{
    public static void main(String args[]){
        //type your code here
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int n = sc.nextInt();
       int result = NumberofWays.countWays(x,n);
       System.out.println(result);
    }
}


public class NumberofWays {
    
    public static int countWays(int x, int n) {
        return fun(x, n, 1);
    }

    public static int fun(int x, int n, int num) {
        if (x == 0) {
            return 1;
        } else if (x < 0 || Math.pow(num, n) > x) {
            return 0;
        } else {
            return fun(x - (int)Math.pow(num, n), n, num + 1) + 
                   fun(x, n, num + 1);
        }
    }
}


//5

import java.util.*;
public class Main{
    public static void main(String args[]){
        //type your code here
        Scanner sc = new Scanner(System.in);
        int s_x = sc.nextInt(), s_y = sc.nextInt(), d_x = sc.nextInt(), d_y=sc.nextInt();
        int isreach = Reachable.isReachable(s_x,s_y,d_x,d_y);
       if(isreach==1){
           System.out.println("True");
       }
       else{
           System.out.println("False");
       }
    }
}

public class Reachable{
    public static int isReachable (int sx,int sy,int dx,int dy)
    {
    //type your code here
    if(sx>dx || sy>dy){
        return 0;
    }
    if(sx==dx && sy==dy){
        return 1;
    }
    return isReachable(sx+sy,sy,dx,dy)|isReachable(sx,sx+sy,dx,dy);
}
}


//6

import java.util.*;
public class Main{
    public static void main(String args[]){
        //type your code here
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int pos = Position.findPos(x);
        System.out.println(pos);
    }
}

public class Position{
    public static int findPos (int x)
    {
    //type your code here
    if(x==1){
        return 1;
    }
    int p = (int) (Math.log(x)/Math.log(2));
    return (int)Math.pow(2,p);
}
}


//7

import java.util.*;
public class Main{
    public static void main(String args[]){
        //type your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int lastdigit = Factorial.lastNonZeroDigit(n);
        System.out.println(lastdigit);
    }
}

public class Factorial{
    public static int lastNonZeroDigit (int n)
    {
    //type your code here
        int[] arr = {1,1,2,6,4,2,2,4,2,8};
        if(n<10){
            return arr[n];
        }
        if(((n/10)%10)%2==0){
            return (6 * lastNonZeroDigit(n/5) * arr[n%10] )% 10;
        }
        else{
            return (4 * lastNonZeroDigit(n/5) * arr[n%10] )% 10;
        }
    }
}


//8

import java.util.*;
public class Main{
    public static void main(String args[]){
        //type your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        BinaryNumbers.printNums(n); 
    }
}

public class BinaryNumbers{
    public static void printNums (int n)
    {
    //type your code here
    String str = "";
    func(str,0,n);
    }
    public static void func(String s, int a, int b){
        if(b==0){
            System.out.print(s+" ");
            return;
        }
        func(s + "1",a+1,b-1);
        if(a>0){
            func(s + "0",a-1,b-1);
        }
    }
}


//9

import java.util.*;
public class Main{
    public static void main(String args[]){
        //type your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int result  = Tiles.minimumTiles(n,m);
        System.out.println(result);
    }
}

public class Tiles{
    public static int minimumTiles (int n,int m)
    {
    //type your code here
        if(n==0 || m==0){
        return 0;
        }
        else if(n%2==0 && m%2==0){
            return minimumTiles(n/2,m/2);
        }
        else if(n%2==0 && m%2==1){
            return n+minimumTiles(n/2,m/2);
        }
        else if(n%2==1 && m%2==0){
            return m+minimumTiles(n/2,m/2);
        }
        else{
            return (n+m-1+minimumTiles(n/2,m/2));
        }
    }
}


//10

import java.util.*;
public class Main{
    public static void main(String args[]){
        //type your code here
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt(), b = sc.nextInt(), c = sc.nextInt();
        int result = PouringWater.minSteps(a,b,c);
        System.out.println(result);
    }
}

public class PouringWater {
    public static int minSteps(int a, int b, int c) {
        if(c>a && c>b){
            return -1;
        }
        if (c > a + b) { 
            return -1;
        }
        if (c == a || c == b) {  
            return 1;
        }
        if (c % gcd(a, b) != 0) {  
            return -1;
        }
        return Math.min(steps(a, b, c), steps(b, a, c));  
    }
    
    private static int steps(int a, int b, int c) {
        int count = 1;
        int j = 0;
        int i = b;
        while (i != c && j != c) {
            int temp = Math.min(i, a - j);
            j += temp;
            i -= temp;
            count++;
            if (i == c || j == c) {
                break;
            }
            if (j == a) {
                j = 0;
                count++;
            }
            if (i == 0) {
                i = b;
                count++;
            }
        }
        return count;
    }
    
    private static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
